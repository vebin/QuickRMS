<#+
// <copyright file="EntityMapTemplate.tt" company="QuickFramework">
//  Copyright ©QuickFramework. All Rights Reserved.
// </copyright>

public class EntityMapTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public EntityMapTemplate(T4ModelInfo model)
    {
        _model = model;
    }

    /// <summary>
    /// 获取生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Map.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
            IEnumerable<PropertyInfo> propertys =  _model.Properties;
            string passStr="Id,UserRole,OperateLog,Module,Permission,User,Role,RoleModulePermission,ParentModule,ChildModule,ModulePermission,";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//
// <copyright file="<#= _model.Name #>Map.cs">
//		Copyright(c)2013 QuickFramework.All rights reserved.
//		开发组织：QuickFramework
//		公司网站：QuickFramework
//		所属工程：QuickRMS.Domain.Data
//		生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations.Schema;

using Quick.Framework.EFData;
using QuickRMS.Domain.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>;


namespace QuickRMS.Domain.Data.Mapping<#= _model.UseModuleDir ? "." + _model.ModuleName : null #>
{
    /// <summary>
    /// 数据表映射 —— <#= _model.Description #>
    /// </summary>    
	partial class <#= _model.Name #>Map
    {
        /// <summary>
		/// 映射配置
		/// </summary>
        partial void <#= _model.Name #>MapAppend()
        {
			// Primary Key
            this.HasKey(t => t.Id);

            // Properties
            <#+
            
            foreach (PropertyInfo item in propertys)
            {
                if(passStr.IndexOf(item.Name+",")<0&&item.Name!="ParentId")
                {
                    if(item.PropertyType==typeof(string))
                    {
                        #> 
                            this.Property(t => t.<#=  item.Name#>).HasMaxLength(100);;
                        <#+
                    }
                    else
                    {
                        #> 
                            this.Property(t => t.<#= item.Name#>);
                        <#+
                    }
                }
            }
            #>            

            // Table & Column Mappings
            this.ToTable("Common_<#=_model.ModuleName+"_"+_model.Name #>");
            this.Property(t => t.Id).HasColumnName("Id").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            <#+
            foreach (PropertyInfo item in propertys)
            {
                if(passStr.IndexOf(item.Name+",")<0)
                {
            #> 
                this.Property(t => t.<#= item.Name#>).HasColumnName("<#=  item.Name#>");
            <#+
                }
            }
            #>  
            // Relation
            <#+
              if(_model.Name=="Module")
                {
            #>  
             this.HasOptional(t => t.ParentModule).WithMany(t => t.ChildModule).HasForeignKey(d => d.ParentId);
            <#+
                }
            #>  
        }

		
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
